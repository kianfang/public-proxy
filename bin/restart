#!/usr/bin/env node

const pm2 = require('pm2');
const {defaultTo, isUndefined} = require('lodash');
const commander = require('commander');
const pkg = require('../package.json');
const connectPM = require('../lib/connectPM');
const getProcessList = require('../lib/getProcessList');
const reloadProcess = require('../lib/reloadProcess');

commander
    .version(pkg.version, '-v, --version')

    .option('-i, --id <n>', 'Restart specified instance', Number)

    .usage('<command>')
;

commander
    .command('http [others...]')
    .description('Restart HTTP proxy server.')
    .action((others, options) => {
        restart(`${pkg.name}-http`, options.parent.id)
    })
;

commander
    .command('socks [others...]')
    .description('Restart Socks proxy server.')
    .action((others, options) => {
        restart(`${pkg.name}-socks`, options.parent.id)
    })
;

commander.parse(process.argv);

if (!commander.args.length) commander.help(); // 直接输出帮助说明

function restart(proc, id) {
    connectPM()
        .then(getProcessList)
        .then((procDescs) => {
            if (
                // 重启匹配实例
                procDescs.some(
                    procDesc =>
                        procDesc.name === proc &&
                        isUndefined(id) ? true : procDesc.pm_id === id
                )
            ) {
                return reloadProcess(defaultTo(id, proc));
            } else {
                console.log(`[Fail] Process ${proc}${isUndefined(id) ? '' : `(${id})`} not exist.`);
                return Promise.resolve();
            }
        })
        .then(() => {
            pm2.disconnect();
            process.exit(0);
        })
        .catch((err) => {
            console.error(err);
            process.exit(1);
        })
    ;
}
