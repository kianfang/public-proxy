#!/usr/bin/env node

const pm2 = require('pm2');
const path = require('path');
const os = require('os');
const readline = require('readline');
const commander = require('commander');
const connectPM = require('../lib/connectPM');
const getProcessList = require('../lib/getProcessList');
const reloadProcess = require('../lib/reloadProcess');
const deleteProcess = require('../lib/deleteProcess');
const stopProcess = require('../lib/stopProcess');
const killDeamon = require('../lib/killDaemon');
const printProcDescs = require('../lib/printProcDescs');
const throwError = require('../lib/throwError');
const pkg = require('../package.json');
const {defaultTo, isUndefined, pick} = require('lodash');

const PUBLIC_PROXY_HOME = path.resolve(os.homedir(), '.public-proxy');

commander
    .version(pkg.version, '-v, --version')

    .usage('<command> [options]')
;

commander
    .command('start <server>')

    .description('Start [socks|http] proxy server.')

    .option('-p, --port <n>', 'Proxy server port.', Number, 1080)

    .option('-a, --address <address>', 'Proxy server address.', String, '0.0.0.0')

    .option('-i, --instances <count>', 'Startup count of cluster.', Number, 2)

    .option('--auth', 'Proxy server auth')

    .option('--auth-file <filepath>', 'Proxy server auth file', String, path.resolve(PUBLIC_PROXY_HOME, 'htpasswd'))

    .action((server, options) => {
        let args = '';
        if (server === 'socks') {
            args += '--no-http';
        } else if (server === 'http') {
            args += '--no-socks';
        } else {
            commander.outputHelp();
            process.exit(1);
        }
        options.port && (args += ` --${server}-port ${options.port}`);
        options.address && (args += ` --${server}-address ${options.address}`);
        options.auth && (args += ` --${server}-auth ${options.authFile}`);
        start(`${pkg.name}-${server}`, args, pick(options, ['instances']))
    })
;

commander
    .command('restart <server>')

    .description('Restart [socks|http] proxy server.')

    .option('-i, --id <n>', 'Restart specified instance', Number)

    .action((server, options) => {
        if (['socks', 'http'].indexOf(server) === -1) {
            commander.outputHelp();
            process.exit(1);
        }
        restart(`${pkg.name}-${server}`, options.id)
    })
;

commander
    .command('stop <server>')

    .description('Stop [socks|http] proxy server.')

    .option('-d, --delete', 'Stop proxy server and delete the instance.')

    .option('-i, --id <n>', 'Restart specified instance', Number)

    .action((server, options) => {
        if (['socks', 'http'].indexOf(server) === -1) {
            commander.outputHelp();
            process.exit(1);
        }
        stop(`${pkg.name}-${server}`, options.delete, options.id)
    })
;

commander
    .command('status [server]')

    .description('Show [socks|http] proxy server status.')

    .action((server) => {
        if (server && ['socks', 'http'].indexOf(server) === -1) {
            commander.outputHelp();
            process.exit(1);
        }
        status(server ? `${pkg.name}-${server}` : null);
    })
;

commander
    .command('log [server]')
    .description('Stream [socks|http] server logs file.')
    .option('--json', 'Json log output')
    .option('--format', 'Formated log output')
    .option('--raw', 'Raw output')
    .option('--err', 'Only shows error output')
    .option('--out', 'Only shows standard output')
    .option('--lines <n>', 'Output the last N lines, instead of the last 15 by default', Number, 15)
    .option('--timestamp [format]', 'Add timestamps (default format YYYY-MM-DD-HH:mm:ss)', String, 'HH:mm:ss')
    .option('--no-stream', 'Print logs without lauching the log stream')
    .action((server, options) => {
        if (['socks', 'http'].indexOf(server) === -1) {
            commander.outputHelp();
            process.exit(1);
        }
        let proc = `${pkg.name}-${server}`;

        let Logs = require('pm2/lib/API/Log.js');

        let exclusive = false;

        if (options.out) exclusive = 'out';

        if (options.err) exclusive = 'err';

        if (!options.stream)
            pm2.printLogs(proc, options.line, !!options.raw, options.timestamp, exclusive);
        else if (options.json)
            Logs.jsonStream(pm2.Client, proc);
        else if (options.format)
            Logs.formatStream(pm2.Client, proc, false, 'YYYY-MM-DD HH:mm:ssZZ');
        else
            pm2.streamLogs(proc, options.line, !!options.raw, options.timestamp, exclusive);
    })
;

commander.command('kill')
    .description('Kill daemon')
    .action((proc) => {
        kill();
    })
;

/**
 * 捕获其它错误命令
 */
commander.command('*')
    .action(() => {
        console.log('Command not found.');
        console.log('Please through "public-proxy --help" command get more info.\n');
        process.exit(1);
    })
;

commander.parse(process.argv);

if (!commander.args.length) commander.help();


function start(proc, args, options) {
    // console.log(proc, args, options);

    let rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });

    connectPM()
        .then(getProcessList)
        .then((procDescs) => {
            if (procDescs.some(procDesc => procDesc.name === proc)) {
                return new Promise((resolve) => {
                    // 已存在进程，与用户确认是否要杀掉进程
                    rl.question(`The ${proc} process will be killed ? (y/N) `, (inputStr) => {
                        if (inputStr.toLowerCase() === 'y') {
                            deleteProcess(proc).then(resolve);
                        } else {
                            console.log(`[Cancel] You can try restart script.`);
                            pm2.disconnect();
                            process.exit(0);
                        }
                    });
                });

            }

            return Promise.resolve();
        })
        .then(() => {
            pm2.start({
                name: proc,
                script: './index.js',
                // args: process.argv.slice(2),
                args: args,
                cwd: path.resolve(__dirname, '../'),
                output: path.resolve(PUBLIC_PROXY_HOME, `./logs/${proc}-output.log`),
                error: path.resolve(PUBLIC_PROXY_HOME, `./logs/${proc}-error.log`),
                pid: path.resolve(PUBLIC_PROXY_HOME, `./pid/${proc}.pid`),
                exec_mode: 'cluster',
                instances: options.instances
            }, (err, procDescs) => {
                throwError(err);
                console.log(`[Success] Server start successfully.`);
                pm2.disconnect();
                process.exit(0);
            });
        })
        .catch((err) => {
            console.error(err);
            process.exit(1);
        })
    ;
}

function stop(proc, isDelete, id) {
    connectPM()
        .then(getProcessList)
        .then((procDescs) => {
            if (
                // 停止匹配实例
                procDescs.some(
                    procDesc =>
                        procDesc.name === proc &&
                        isUndefined(id) ? true : procDesc.pm_id === id
                )
            ) {
                return isDelete ? deleteProcess(defaultTo(id, proc)) : stopProcess(defaultTo(id, proc))
            } else {
                console.log(`[Fail] Process ${proc}${isUndefined(id) ? '' : `(${id})`} not exist.`);
                return Promise.resolve();
            }
        })
        .then(() => {
            pm2.disconnect();
            process.exit(0);
        })
        .catch((err) => {
            console.error(err);
            process.exit(1);
        })
    ;
}

function status(proc) {
    connectPM()
        .then(getProcessList)
        .then((procDescs) => {
            printProcDescs(procDescs.filter(
                procDesc => proc ? proc === procDesc.name : [`${pkg.name}-http`, `${pkg.name}-socks`].indexOf(procDesc.name) > -1
            ));
            pm2.disconnect();
            process.exit(0);
        })
        .catch((err) => {
            console.error(err);
            process.exit(1);
        })
    ;
}

function kill() {
    connectPM()
        .then(getProcessList)
        .then((procDescs) => {
            // 必须确保仅包含http、socks服务，防止误删除
            if (procDescs.every(procDesc => [`${pkg.name}-http`, `${pkg.name}-socks`].indexOf(procDesc.name) > -1)) {
                return killDeamon();
            } else {
                throw new Error('[Fail] Exist other process.');
            }
        })
        .then(() => {
            pm2.disconnect();
            process.exit(0);
        })
        .catch((err) => {
            console.error(err);
            process.exit(1);
        })
    ;
}

function restart(proc, id) {
    connectPM()
        .then(getProcessList)
        .then((procDescs) => {
            if (
                // 重启匹配实例
                procDescs.some(
                    procDesc =>
                        procDesc.name === proc &&
                        isUndefined(id) ? true : procDesc.pm_id === id
                )
            ) {
                return reloadProcess(defaultTo(id, proc));
            } else {
                console.log(`[Fail] Process ${proc}${isUndefined(id) ? '' : `(${id})`} not exist.`);
                return Promise.resolve();
            }
        })
        .then(() => {
            pm2.disconnect();
            process.exit(0);
        })
        .catch((err) => {
            console.error(err);
            process.exit(1);
        })
    ;
}
